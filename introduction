1.一个资源服务器，提供资源下载，并且把所有文件作为种子发布
2.若干初始节点，从服务器下载资源并保存
3.其余客户端

要求
1.节点的异构性：
web节点：1.场景渲染 2.加入swarm 3.建立webrtc通道 4.下载并暂存文件
node节点：1.场景渲染 2.加入DHT 3.加入swarm 4.建立TCP通道 5.文件系统
素材服务器：1.tracker 2.提供初始下载 3.制作场景文件的种子 4.信令服务器
2.分簇
3.多线程
4.异步处理
5.文件的流处理
6.重新设计模块
7.去除加载慢帧数低等bug
8.修改坐标不吻合bug
9.加入山地地形和碰撞检测，优化外观
10.使用browserify把所有文件模块化

计划
1.预处理所有代码，使其合理，正规
1.写一个素材服务器，提供初始网页。实现基本的文件下载，种子制作，信令功能，（可以不提供tracker）
2.实现若干node节点，实现node节点间传输。优化多线程模块
3.写一个web端文件系统并使用流.实现若干web节点，他们能通过系统中node节点上的DHT信息获取web peer的位置，也能通过tcp和tracker通信获取信息。
并和web peer建立webrtc连接，能够把场景文件暂存至本地并提供给其他web节点下载

和原来的区别
原来是钉死的，固定哪些人一定有，固定由哪些人来传。现在是谁有什么就由谁来传什么，没有就不传，有多少传多少。这样更符合现实，系统更具有普适性
而且只适合有几台机子的demo，因为全靠广播。之前最大的问题是广播，也就是像谁要模型是完全靠广播请求的。而现在是向tracker服务器请求一次即可
同样的，也不需要所有机子两两建立webrtc，只需要有需求的两两建立就可以了。
而且新系统鲁棒性相较原来也大大提高了